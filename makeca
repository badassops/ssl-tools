#!/usr/bin/env bash
#
# Copyright 1996 - 2012 Luc Suryo <luc@suryo.com>.
# Copyright 2012 - 2020 (c) Badassops LLC / Luc Suryo
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#	* Redistributions of source code must retain the above copyright
#	notice, this list of conditions and the following disclaimer.
#	* Redistributions in binary form must reproduce the above copyright
#	notice, this list of conditions and the following disclaimer in the
#	documentation and/or other materials provided with the distribution.
#	* Neither the name of the <organization> nor the
#	names of its contributors may be used to endorse or promote products
#	derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSEcw
# ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#*
#* File		:	makeca
#*
#* Description	:	script to make a CA X500-SSL certificate
#*
#* Author	:	Luc Suryo <luc@badassops.com>
#*
#* Version	:	0.5
#*
#* Date		:	May 21, 2020
#*
#* History	:
#* 		Date:				Author:		Info:
#*		March 1, 1996		LIS			First Release
#*		July 20, 2010		LIS			New license
#*		Aug 10, 2012		LIS			Set Copyright to Badassops LLC
#*		Nov 23, 2015		LIS			Adjusted license and variable for Poynt
#*										and made script with the standard setup
#*		May 21, 2020        LIS         fixed several bug, add color
#*
# get details:
# openssl rsa -noout -text -in ca.key
# openssl x509 -noout -text -in ca.crt
# openssl x509 -in ca/ca.cert -noout -text -certopt no_version,no_pubkey,no_sigdump -nameopt multiline

_program="${0##*/}"
_author='Luc Suryo'
_copyright="Copyright 2012 - $(date "+%Y") (c) Badassops LLC"
_license='License BSD, http://www.freebsd.org/copyright/freebsd-license.html'
_version='0.5'
_email='luc@badassops.com'
_summary='script to make a CA X500-SSL certificate'
_cancelled="OK : Process has been cancelled on your request."
_info="$_program $_version\n$_copyright\n$_license\n\nWritten by $_author <$_email>\n$_summary\n"
_text_before_start="This script will create your own CA certificate, this should not be used in live production!"

# Whatever script needs to be run as root and exclusive lock
_need_root=0
_need_lock=1

# working variables
_opid=$$
_hostname="${HOSTNAME%%.*}"
_work_dir=/var/tmp/"$_program"
_lockfile="$_work_dir/$_program".LOCK
_work_cert="$_work_dir/mkcert.cfg"
_echo_flag='-e'
_openssl=openssl
_my_cert_name="ca"
_my_ca_dir="./ca"
_my_ca_cnf="$_my_ca_dir/ca.cnf"
# hardcode ca name unless overwritten in env
_my_domain=

# color :)
_reset_color='\033[0m'				# Text Reset
_color_bold_black='\033[1;30m'		# Black
_color_bold_red='\033[1;31m'		# Red
_color_bold_green='\033[1;32m'		# Green
_color_bold_yellow='\033[1;33m'		# Yellow
_color_bold_blue='\033[1;34m'		# Blue
_color_bold_purple='\033[1;35m'		# Purple
_color_bold_cyan='\033[1;36m'		# Cyan
_color_bold_white='\033[1;37m'		# White

# Cert Variables
if [[ -f env ]] ; then
	source ./env
else
	echo $_echo_flag "\t$_color_bold_purple ** no env file found"
	echo $_echo_flag "\tyou will need to enter the cert detail manually **$_reset_color"
fi

function inthandler() {
	echo $_echo_flag "\n$_color_bold_red\t!!! Something when wrong or Control-C was press, deleting all certs file for $_my_cert_name !!!$_reset_color"
	clean_up_upon_fail
	clean_up
	echo $_echo_flag "$_cancelled"
	exit 0
}

function clean_up() {
	rm -rf "$_work_dir" > /dev/null 2>&1
	return 0
}

function clean_up_upon_fail() {
	rm -rf "$_my_ca_dir"/* > /dev/null 2>&1
	return 0
}

# Set interrupt handler
trap inthandler 1 2 3 4 5 9 10 12 15 23 24 25

function help() {
	trap 1 2 3 4 5 9 10 12 15 23 24 25
	echo $_echo_flag "$_info"
	echo $_echo_flag "Usage : $_program [-h] [-d domain name]"
	echo $_echo_flag "Note the -d option is required if no env file exist"
	clean_up
	exit 0
}

function isRoot() {
	if (($(id -u) != 0)) ; then
		echo $_echo_flag "\n\t*** $_program: this script must be run as the user root ***\n" >&2
		return 1
	fi
	return 0
}

function check_running() {
	if [[ -f "$_lockfile" ]]; then
		/bin/ps -p $(cat $_lockfile) > /dev/null 2>&1
		if (( $? == 0 )) ; then
			echo $_echo_flag "*** There is already a $_program running, execution has been terminated. ***"
			echo $_echo_flag "*** If this is an error please remove the lock file: $_lockfile ***"
			exit $_state_ok
		else
			echo $_echo_flag "*** Lock file found and deleted since there is no process with that pid ***"
			rm -rf $_lockfile > /dev/null 2>&1
		fi
	fi
	if ! mkdir -p "$_work_dir" > /dev/null 2>&1;then
		echo $_echo_flag "*** $_state_critical_msg: Unable to create file working directory $_work_dir! ***"
		exit $_state_unknown
	fi
	echo "$_opid" > "$_lockfile"
	return 0
}

function get_given_options() {
	local _option_domain=0
	local _has_error=0
	case "$1" in
		'-d'|'--domain'|'-domain')		_my_domain=$2 ; shift ; let let _option_domain++ ;;
		'-h'|'--help'|'-help')			help ; exit $_state_ok ;;
		'-v'|'--version'|'-version')	echo $_echo_flag "$_version" ; exit $_state_ok ;;
	esac
	(( $_option_domain > 1 )) && echo $_echo_flag "\n\t: -d can only be given once." && help
	[[ -z $_my_domain ]] && $_echo_flag "\n\t: domain not, this is required, use the vn file or the -d flage." && help
	_subject_alt_name="DNS:$_my_cert_name, DNS:$_my_cert_name.$_my_domain"
	_my_cert_crt="$_my_cert_name".crt
	_my_cert_key="$_my_cert_name".key
	_my_cert_csr="$_my_cert_name".csr
	_my_cert_pass="$_my_cert_name".pass
	_cert_files="$_my_cert_crt $_my_cert_key $_my_cert_csr $_my_cert_pass ${_my_cert_key}.crypt"
	return 0
}

function setup_env() {
	# make sure environment exists
	[[ ! -d certs ]] && mkdir certs
	[[ ! -d ca ]] && mkdir ca
	[[ ! -f ca.serial ]] && echo '01' > ca/ca.serial
	[[ ! -f ca.index ]] && cp /dev/null ca/ca.index
	return 0
}

function create_ca_config() {
	echo $_echo_flag "\t*** Generating the CA configuration file [$_my_ca_cnf] ***"
cat > $_my_ca_cnf <<EOT
CA_HOME			= .

[ ca ]
default_ca		= root_ca

[ root_ca ]
dir				= \$CA_HOME
certs			= \$dir
new_certs_dir	= \$dir/certs
database		= \$dir/ca/ca.index
serial			= \$dir/ca/ca.serial
certificate		= \$dir/ca/ca.crt
private_key		= \$dir/ca/ca.key

default_days	= 1826 # Five years
crl_dir			= \$dir/ca/ca.crl
crlnumber		= \$dir/ca/ca.crlnum
name_opt		= multiline, align
cert_opt		= no_pubkey
copy_extensions	= copy
crl_extensions	= crl_ext
default_crl_days= 180
default_md		= sha256
preserve		= no
email_in_dn		= no
policy			= policy
unique_subject	= no

[ policy ]
countryName				= supplied
stateOrProvinceName		= supplied
localityName			= supplied
organizationName		= supplied
organizationalUnitName	= supplied
commonName				= supplied

[ req ]
dir					= \$CA_HOME
default_bits		= 4096
default_keyfile		= \$dir/ca/ca.key
encrypt_key			= yes
default_md			= sha256
string_mask			= utf8only
utf8				= yes
req_extensions		= root-ca_req_ext
distinguished_name	= distinguished_name
subjectAltName		= @subject_alt_name
req_extensions		= v3_req

[ root-ca_req_ext ]
subjectKeyIdentifier	= hash
subjectAltName			= @subject_alt_name

[ distinguished_name ]
countryName                     = "1. Country Name             (2 letter code)"
countryName_default             = $_my_country
countryName_min                 = 2
countryName_max                 = 2
stateOrProvinceName             = "2. State or Province Name   (full name)    "
stateOrProvinceName_default     = $_my_state
localityName                    = "3. Locality Name            (eg, city)     "
localityName_default            = $_my_city
0.organizationName              = "4. Organization Name        (eg, company)  "
0.organizationName_default      = $_my_org
organizationalUnitName          = "5. Organizational Unit Name (eg, section)  "
organizationalUnitName_default  = $_my_ca
commonName                      = "6. Common Name              (eg, CA name)  "
commonName_max                  = 64
commonName_default              = $_my_org Root Certification Authority

[ root-ca_ext ]
basicConstraints		= critical, CA:true
keyUsage				= critical, keyCertSign, cRLSign
subjectKeyIdentifier	= hash
subjectAltName			= @subject_alt_name
authorityKeyIdentifier	= keyid:always
issuerAltName			= issuer:copy

[ intermed-ca_ext ]
basicConstraints		= critical, CA:true, pathlen:0
keyUsage				= critical, keyCertSign, cRLSign
subjectKeyIdentifier	= hash
subjectAltName			= @subject_alt_name
authorityKeyIdentifier	= keyid:always
issuerAltName			= issuer:copy

[ crl_ext ]
authorityKeyIdentifier	= keyid:always
issuerAltName			= issuer:copy

[ subject_alt_name ]
URI				= http://$_my_org/
email			= $_my_email

[ v3_req ]
subjectAltName	= $_subject_alt_name
EOT
	return 0
}

function create_key() {
	echo $_echo_flag "$_color_bold_cyan\t Generating RSA private key for the CA ($_my_sec_size bit) [${_my_cert_key}] $_reset_color"
	$_openssl genrsa -out "$_my_ca_dir"/"$_my_cert_key" $_my_sec_size > /dev/null 2>&1
	(( $? != 0 )) && return 1
	echo $_echo_flag "$_color_bold_cyan\t created$_reset_color\n"
	return 0
}

function create_csr() {
	echo $_echo_flag "\t$_color_bold_cyan Generating X.509 certificate request for the CA [${_my_cert_csr}]$_reset_color"
	$_openssl req -nodes -config $_my_ca_cnf -new -key "$_my_ca_dir"/"$_my_cert_key" -out "$_my_ca_dir"/"$_my_cert_csr"
	(( $? != 0 )) && return 1
	return 0
}

function create_cert() {
	echo $_echo_flag "\t*** Generating X.509 certificate for CA signed by itself [$_my_cert_crt] ***"
	$_openssl ca -selfsign 					\
		-config $_my_ca_cnf					\
		-in "$_my_ca_dir"/$_my_cert_csr		\
		-out "$_my_ca_dir"/$_my_cert_crt	\
		-extensions root-ca_ext
	(( $? != 0 )) && return 1
	return 0
}

function check_cert() {
	echo $_echo_flag "$_color_bold_green\t*** Verify: matching certificate & key modulus ***$_reset_color\n"
	_modcrt=$($_openssl x509 -noout -modulus -in "$_my_ca_dir"/"$_my_cert_crt"	| sed -e 's;.*Modulus=;;')
	_modkey=$($_openssl rsa -noout -modulus -in "$_my_ca_dir"/"$_my_cert_key"	| sed -e 's;.*Modulus=;;')
	if [[ "$_modcrt" != "$_modkey" ]]; then
		echo $_echo_flag "$_color_bold_red\tError: Failed to verify CA certificate to it key file $_reset_color\n"
		return 1
	fi

	echo $_echo_flag "$_color_bold_green\t*** Verify: matching certificate signature ***$_reset_color\n"
	$_openssl verify -CAfile "$_my_ca_dir"/"$_my_cert_crt" "$_my_ca_dir"/"$_my_cert_crt" /dev/null 2>&1
	if (( $? != 0 )) ; then
		echo $_echo_flag "$_color_bold_red\tError: Failed to verify CA root $_reset_color\n"
		return 1
	fi

	echo $_echo_flag "$_color_bold_green\t*** Enrypting RSA private key of CA with a pass phrase for security [${_my_cert_key}] ***$_reset_color\n"
	echo $_echo_flag "$_color_bold_cyan\t Password set is $_color_bold_purple$_my_req_pass $_reset_color\n"
	$_openssl rsa -des3 -in "$_my_ca_dir"/"$_my_cert_key" -out "$_my_ca_dir"/"$_my_cert_key".crypt > /dev/null 2>&1
	if (( $? != 0 )) ; then
		echo $_echo_flag "$_color_bold_red\tError: Failed to Enrypting RSA private key of CA with a pass phrase $_reset_color\n"
		return 1
	fi
	return 0
}

function make_it() {
	create_ca_config
	create_key
	(( $? != 0 )) && return 1
	create_csr
	(( $? != 0 )) && return 1
	create_cert
	(( $? != 0 )) && return 1
	check_cert
	(( $? != 0 )) && return 1

	# create the password file for the cert, so we have it in case we forgot the password.
	echo $_echo_flag "\n$_color_bold_cyan\t About to Create the password file for the csr and key, so we have it in case we forgot the password $_reset_color"
	echo -en "\t${_color_bold_yellow} Enter the key file password :$_reset_color "
	stty -echo
	read in_key
	stty echo
	echo "$in_key" > "$_my_ca_dir"/"$_my_cert_name".pass
	echo $_echo_flag "\n\t$_color_bold_green Own CA Cert created and ready for use.....$_reset_color"
	return 0
}

function main() {
	local _result=0
	if (( $_need_root == 1 )) ; then
		isRoot
		(( $? != 0 )) && echo $_echo_flag "$_info" && exit 255
	fi
	(( $_need_lock == 1 )) && check_running
	get_given_options $@
	setup_env

	echo $_echo_flag "$_text_before_start"
	echo $_echo_flag "$_color_bold_yellow\tPress Enter to continue or Control-C to cancel...$_reset_color"
	read inKey
	make_it
	_result=$?
	(( $_result == 1 )) && clean_up_upon_fail
	clean_up
	trap 1 2 3 4 5 9 10 12 15 23 24 25
	exit $_result
}
main "$@"
